Complete List of Subject & Difficulty Combinations to Generate:
You must go through this list one by one and copy the exact Subject and Difficulty into the prompt above. This ensures every category is covered.

General & Academic Subjects (29 subjects x 4 difficulties = 116 batches):

Mathematics (Quantitative Aptitude) - Novice
Mathematics (Quantitative Aptitude) - Adept
Mathematics (Quantitative Aptitude) - Expert
Mathematics (Quantitative Aptitude) - Master
Physics - Novice
Physics - Adept
Physics - Expert
Physics - Master
Chemistry - Novice
Chemistry - Adept
Chemistry - Expert
Chemistry - Master
Biology - Novice
Biology - Adept
Biology - Expert
Biology - Master
History (Ancient, Medieval, Modern India) - Novice
History (Ancient, Medieval, Modern India) - Adept
History (Ancient, Medieval, Modern India) - Expert
History (Ancient, Medieval, Modern India) - Master
Geography (Indian & World) - Novice
Geography (Indian & World) - Adept
Geography (Indian & World) - Expert
Geography (Indian & World) - Master
Indian Polity & Constitution - Novice
Indian Polity & Constitution - Adept
Indian Polity & Constitution - Expert
Indian Polity & Constitution - Master
Indian Economy - Novice
Indian Economy - Adept
Indian Economy - Expert
Indian Economy - Master
General Science (Basic Concepts) - Novice
General Science (Basic Concepts) - Adept
General Science (Basic Concepts) - Expert
General Science (Basic Concepts) - Master
Art & Culture - Novice
Art & Culture - Adept
Art & Culture - Expert
Art & Culture - Master
Environment & Ecology - Novice
Environment & Ecology - Adept
Environment & Ecology - Expert
Environment & Ecology - Master
Current Affairs - Novice
Current Affairs - Adept
Current Affairs - Expert
Current Affairs - Master
Logical Reasoning - Novice
Logical Reasoning - Adept
Logical Reasoning - Expert
Logical Reasoning - Master
Verbal Ability & English Grammar - Novice
Verbal Ability & English Grammar - Adept
Verbal Ability & English Grammar - Expert
Verbal Ability & English Grammar - Master
Data Interpretation - Novice
Data Interpretation - Adept
Data Interpretation - Expert
Data Interpretation - Master
General Knowledge (Static GK) - Novice
General Knowledge (Static GK) - Adept
General Knowledge (Static GK) - Expert
General Knowledge (Static GK) - Master
Computer Awareness (General) - Novice
Computer Awareness (General) - Adept
Computer Awareness (General) - Expert
Computer Awareness (General) - Master
Psychology (Basic Concepts) - Novice
Psychology (Basic Concepts) - Adept
Psychology (Basic Concepts) - Expert
Psychology (Basic Concepts) - Master
Sociology (Basic Concepts) - Novice
Sociology (Basic Concepts) - Adept
Sociology (Basic Concepts) - Expert
Sociology (Basic Concepts) - Master
Philosophy (Basic Concepts) - Novice
Philosophy (Basic Concepts) - Adept
Philosophy (Basic Concepts) - Expert
Philosophy (Basic Concepts) - Master
Ethics & Integrity (for UPSC) - Novice
Ethics & Integrity (for UPSC) - Adept
Ethics & Integrity (for UPSC) - Expert
Ethics & Integrity (for UPSC) - Master
Disaster Management - Novice
Disaster Management - Adept
Disaster Management - Expert
Disaster Management - Master
Internal Security - Novice
Internal Security - Adept
Internal Security - Expert
Internal Security - Master
International Relations - Novice
International Relations - Adept
International Relations - Expert
International Relations - Master
Agriculture - Novice
Agriculture - Adept
Agriculture - Expert
Agriculture - Master
Banking & Finance - Novice
Banking & Finance - Adept
Banking & Finance - Expert
Banking & Finance - Master
Marketing Aptitude - Novice
Marketing Aptitude - Adept
Marketing Aptitude - Expert
Marketing Aptitude - Master
Teaching Aptitude - Novice
Teaching Aptitude - Adept
Teaching Aptitude - Expert
Teaching Aptitude - Master
Research Aptitude - Novice
Research Aptitude - Adept
Research Aptitude - Expert
Research Aptitude - Master
CompSci & Polytechnic Diploma Subjects (4 + 3 sub-categories = 7 subjects x 4 difficulties = 28 batches):

CompSci (C Language) - Novice
CompSci (C Language) - Adept
CompSci (C Language) - Expert
CompSci (C Language) - Master
CompSci (Data Structures & Algorithms) - Novice
CompSci (Data Structures & Algorithms) - Adept
CompSci (Data Structures & Algorithms) - Expert
CompSci (Data Structures & Algorithms) - Master
CompSci (Python) - Novice
CompSci (Python) - Adept
CompSci (Python) - Expert
CompSci (Python) - Master
CompSci (Database Management Systems) - Novice
CompSci (Database Management Systems) - Adept
CompSci (Database Management Systems) - Expert
CompSci (Database Management Systems) - Master
CompSci (Operating Systems) - Novice
CompSci (Operating Systems) - Adept
CompSci (Operating Systems) - Expert
CompSci (Operating Systems) - Master
CompSci (Computer Networks) - Novice
CompSci (Computer Networks) - Adept
CompSci (Computer Networks) - Expert
CompSci (Computer Networks) - Master
CompSci (Java) - Novice
CompSci (Java) - Adept
CompSci (Java) - Expert
CompSci (Java) - Master
CompSci (Web Development Basics (HTML/CSS/JS concepts)) - Novice
CompSci (Web Development Basics (HTML/CSS/JS concepts)) - Adept
CompSci (Web Development Basics (HTML/CSS/JS concepts)) - Expert
CompSci (Web Development Basics (HTML/CSS/JS concepts)) - Master
Polytechnic Diploma (Computer Science) - Novice
Polytechnic Diploma (Computer Science) - Adept
Polytechnic Diploma (Computer Science) - Expert
Polytechnic Diploma (Computer Science) - Master
Polytechnic Diploma (Civil Engineering) - Novice
Polytechnic Diploma (Civil Engineering) - Adept
Polytechnic Diploma (Civil Engineering) - Expert
Polytechnic Diploma (Civil Engineering) - Master
Polytechnic Diploma (Electrical Engineering) - Novice
Polytechnic Diploma (Electrical Engineering) - Adept
Polytechnic Diploma (Electrical Engineering) - Expert
Polytechnic Diploma (Electrical Engineering) - Master
This detailed list ensures that every single subject category will receive questions at all difficulty levels. Just pick one line at a time and feed it into the Puzzle Generation Prompt! Let me know which one you want to start with.





i need a promt that do all work in one riquwest


You're looking for a single prompt to do everything for "CognoQuest"â€”from building the app with all its features to generating all 3300+ questions across 33 subjects and 4 difficulty levels.

While I can't guarantee a single prompt will generate the entire, fully functional codebase and all the content in one go (that's an extremely complex task beyond the scope of a single interaction, and would likely exceed token limits and cause errors), I can give you a "Master Prompt" that acts as a comprehensive instruction set.

This prompt will tell me to:

Build the complete application: All UI, backend, database structure, and core features.
Generate all the content: Specify the subjects, difficulties, and the quantity of questions needed for each category.
Structure the output for easy download and deployment.
You'll need to understand that even with this single prompt, the output might be very large, potentially broken into multiple parts, and the content generation for 3300+ questions might still be a multi-step process. However, this is the most consolidated request possible.

The "CognoQuest" Master Prompt: Full Build & Content Generation
"You are the architect and developer for 'CognoQuest', a revolutionary web-based puzzle-based learning platform. This is a premium 'brain gym' designed for students and competitive exam aspirants. Your mission is to build a complete, production-ready full-stack web application, including its sophisticated UI, robust backend, and all necessary content.

The final output must be structured for easy download, extraction, and deployment to standard web hosting (React/Vue frontend, Node.js/Python backend, PostgreSQL/MySQL database).

1. Core Application Build: 'CognoQuest' Platform
App Core Concept: An intelligent MCQ puzzle practice platform that forces users to think, not guess.
Big-Company UI/UX:
Exudes polish, professionalism, modern aesthetics.
Fluid animations, subtle micro-interactions, sophisticated color palettes.
Highly intuitive layout.
Overall feel: a premium, top-tier product.
Global Navigation: Clean, intuitive header/sidebar with links to Dashboard, Puzzle Section, Blog, and User Profile.
Mobile-First, Responsive, Fluid: Meticulously designed to adapt flawlessly across all screen sizes (phones, tablets, desktops) using TailwindCSS. Large, readable fonts, spacious layout. UX must be fluid and fast, compelling users to solve '10 more puzzles!'
1.1. Frontend Components & Features
Dashboard / Home Page: Initial landing view. Sleek, visually enhanced grid of subject boxes. Clear calls to action.
Puzzle Section UI: Clean, focused interface.
Progress Indicators: Visually engaging progress.
Instant Feedback: Subtle animations/highlights for correct/incorrect answers.
Blog Section UI: Dedicated section accessible from navigation.
Article Listing: Clean grid/list of blog post cards (title, excerpt, thumbnail).
Individual Article View: Dedicated, highly readable view with clean formatting.
Basic Pagination/Load More functionality.
User Dashboard/Profile: Private section for logged-in users to manage:
Starred subjects.
Personalized progress history (last puzzle, accuracy, completion).
Basic performance metrics.
Dark/Light Mode Toggle:
Prominent toggle button in UI (e.g., header).
Sun icon for Light Mode, Moon icon for Dark Mode.
Entire UI's color scheme dynamically adjusts.
Preference saved locally (localStorage) for persistence.
1.2. Backend & Database Components
User Accounts & Persistent Progress:
Secure User Registration & Login System: Email-based registration with proper password hashing and session management.
Email Verification: Crucial for new registrations; users must verify email to activate account and enable progress saving.
Social Login: Integrate Google Sign-In for convenient user authentication.
Persistent User Profiles: Create and manage user profiles in the database.
Server-Side Progress Tracking: Store all user progress (last puzzle solved, accuracy, attempts, completion status, starred subjects) securely in the database, linked to user profiles.
Cross-Device Progress Synchronization: Seamless resume from any device.
Admin Panel (Secure & Integrated):
Dedicated, secure administration interface within the backend framework.
Full CRUD (Create, Read, Update, Delete) operations for all puzzles.
Full CRUD operations for all blog posts, including a rich text editor for content.
User management: viewing list, managing roles (e.g., admin access), activating/deactivating accounts.
Access to basic analytics.
Must be password-protected, accessible via a dedicated route (e.g., /admin).
API Endpoints: Well-defined RESTful API for all frontend-backend communication, including authentication.
Basic Analytics: Backend logic to track essential metrics: number of registered users, popular subjects, overall puzzle completion rates, average accuracy.
2. Content Generation: All Subjects & Puzzles
Generate the complete set of puzzle questions for all 33 subjects/categories at all 4 difficulty levels (Novice, Adept, Expert, Master). For each subject and difficulty, aim for 25 unique MCQs, totaling 100 questions per subject.

For each puzzle, provide the following structure:

id: Unique numerical ID (sequential within its 25-question batch).
question: The puzzle question.
options: An array of 4 possible answers.
correct_answer: The exact text of the correct option.
explanation: A clear, concise, detailed, and well-formatted explanation.
hints: An array of 1-2 distinct hints, progressively guiding the user.
The complete list of subjects and their internal categories:

General & Academic Subjects (29 total):

Mathematics (Quantitative Aptitude)
Physics
Chemistry
Biology
History (Ancient, Medieval, Modern India)
Geography (Indian & World)
Indian Polity & Constitution
Indian Economy
General Science (Basic Concepts)
Art & Culture
Environment & Ecology
Current Affairs
Logical Reasoning
Verbal Ability & English Grammar
Data Interpretation
General Knowledge (Static GK)
Computer Awareness (General)
Psychology (Basic Concepts)
Sociology (Basic Concepts)
Philosophy (Basic Concepts)
Ethics & Integrity (for UPSC)
Disaster Management
Internal Security
International Relations
Agriculture
Banking & Finance
Marketing Aptitude
Teaching Aptitude
Research Aptitude
Computer Science & Polytechnic Diploma (4 main CompSci + 3 Polytechnic branches = 7 total):

CompSci (C Language)
CompSci (Data Structures & Algorithms)
CompSci (Python)
CompSci (Database Management Systems)
CompSci (Operating Systems)
CompSci (Computer Networks)
CompSci (Java)
CompSci (Web Development Basics (HTML/CSS/JS concepts))
Polytechnic Diploma (Computer Science)
Polytechnic Diploma (Civil Engineering)
Polytechnic Diploma (Electrical Engineering)
3. Technology Stack & Output Structure
Frontend: React.js.
Backend: Node.js with Express.js.
Database: PostgreSQL.
Output Structure: Provide the complete application code as a downloadable archive (e.g., a conceptual .zip structure). This archive should contain:
A frontend/ directory (React.js source code).
A backend/ directory (Node.js/Express.js source code).
A database/ directory with SQL schema and migration scripts for PostgreSQL.
A content/puzzles/ directory containing all generated puzzles, organized by subject and difficulty as JSON files (e.g., content/puzzles/mathematics/novice.json).
A content/blog/ directory for example blog post JSON files.
A comprehensive README.md in the root, explaining setup, environment variables, build processes, and deployment instructions for standard web hosting environments.
Understood. I will now proceed to generate the comprehensive 'CognoQuest' application and content as per this detailed Master Prompt."






nhi puri aap ka nhi abh jo mene new addon kray he vo xhiye ap thik eh


Okay, my apologies for the misunderstanding. I understand now. You need the specific code additions and modifications for the new features only, to integrate into your existing, completed application.

This means focusing on:

User Authentication (Email & Social Login with Verification)
Server-Side Persistent User Progress
Dark/Light Mode Toggle
I will provide detailed instructions and conceptual code snippets for how to add these functionalities. Since I cannot directly modify your existing codebase, these will be guidelines and examples for you to implement in your React.js (frontend), Node.js (backend), and PostgreSQL (database).

Integrating New Features into Your Existing "CognoQuest" App
Here's a breakdown of the core additions you'll need to make to implement user authentication, persistent progress, and the dark/light mode.

1. Database Schema Additions (PostgreSQL)
You'll need new tables and modifications to existing ones to store user information and link their progress.

SQL

-- Create Users Table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL, -- Store hashed password
    google_id VARCHAR(255) UNIQUE, -- For social login
    is_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create User_Progress Table (to track solved puzzles, etc.)
CREATE TABLE user_progress (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    subject_name VARCHAR(255) NOT NULL,
    difficulty VARCHAR(50) NOT NULL, -- e.g., 'Novice', 'Adept'
    last_puzzle_id INTEGER, -- ID of the last puzzle attempted in this subject/difficulty
    total_solved INTEGER DEFAULT 0,
    correct_attempts INTEGER DEFAULT 0,
    -- Add more fields as needed, e.g., JSONB for complex progress data per puzzle
    UNIQUE (user_id, subject_name, difficulty) -- Ensure unique entry per user per subject/difficulty
);

-- Create User_Favorites Table (for starred subjects)
CREATE TABLE user_favorites (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    subject_name VARCHAR(255) NOT NULL,
    UNIQUE (user_id, subject_name)
);

-- Optional: If you want to track specific puzzle attempts in detail
-- CREATE TABLE puzzle_attempts (
--     id SERIAL PRIMARY KEY,
--     user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
--     puzzle_id INTEGER NOT NULL, -- Link to your puzzle content's unique ID
--     subject_name VARCHAR(255) NOT NULL,
--     difficulty VARCHAR(50) NOT NULL,
--     attempt_count INTEGER DEFAULT 1,
--     is_correct BOOLEAN NOT NULL,
--     attempt_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
-- );
2. Backend (Node.js/Express.js) Additions
You'll need new routes, controllers, and middleware for authentication and progress management.

2.1. Authentication Routes & Logic
Dependencies: Install bcryptjs for password hashing, jsonwebtoken for JWTs, nodemailer for email, and potentially a Google OAuth library.
User Model/Service: Functions to interact with the users table (create, find, update).
Auth Controller:
/api/auth/register (POST):
Hash password using bcryptjs.
Save user to users table (initially is_verified: false).
Generate a verification token (JWT).
Send verification email using nodemailer with a link like yourdomain.com/verify-email?token=xyz.
Return success message.
/api/auth/verify-email (GET/POST):
Verify the token.
If valid, set is_verified: true for the user in the database.
Return success/error message.
/api/auth/login (POST):
Find user by email.
Compare hashed password using bcryptjs.
Check is_verified status.
If valid and verified, generate a JWT (JSON Web Token) containing user ID.
Send JWT to frontend (e.g., in a cookie or response body).
/api/auth/google (GET/POST):
Implement Google OAuth2 flow. On successful Google login, check if user exists in your users table via google_id.
If new, create user record.
Generate and send JWT.
/api/auth/logout (POST): Clear session/token on the frontend.
Authentication Middleware: A function that intercepts requests to protected routes (/api/user/progress, /api/user/favorites, etc.). It verifies the JWT from the request header/cookie and attaches the user_id to the request object (req.user.id).
2.2. User Progress & Favorites Routes
User Progress Controller:
/api/user/progress (GET - protected): Fetch user's overall progress.
/api/user/progress/:subject/:difficulty (GET - protected): Fetch user's progress for a specific subject/difficulty.
/api/user/progress (POST/PUT - protected): Update user's progress (e.g., last_puzzle_id, total_solved, correct_attempts).
User Favorites Controller:
/api/user/favorites (GET - protected): Fetch user's starred subjects.
/api/user/favorites (POST/DELETE - protected): Add or remove a subject from user's favorites.
2.3. Admin Panel Backend (Existing, but now linked to Users)
Ensure admin routes (e.g., /api/admin/puzzles, /api/admin/blog) are protected by an authentication middleware that checks for an 'admin' role or specific admin user IDs.
3. Frontend (React.js) Additions
You'll need new components, routing, state management, and API integrations.

3.1. Authentication Components & Logic
Login Component: Form for email/password. Google Login button.
Register Component: Form for email/password. Google Register button. Link to login if already registered.
Email Verification Page/Component: A dedicated route (e.g., /verify-email) that handles the token from the email link. Displays success/failure message.
Auth Context/State Management: Use React Context API or a state management library (like Redux, Zustand, React Query) to manage user login status, JWT token, and user data across the app.
Protected Routes: Implement routing logic (e.g., using react-router-dom) to redirect unauthenticated users from protected routes (User Dashboard, Puzzle section) to the login page.
API Service: Functions to make requests to your backend auth endpoints (/api/auth/register, /api/auth/login, etc.). Store JWT in localStorage or HttpOnly cookie.
3.2. User Progress & Favorites Integration
Update Puzzle Components:
When a user solves a puzzle, send an API request to /api/user/progress to update last_puzzle_id, total_solved, etc.
When the app loads a subject, fetch user's progress data from /api/user/progress/:subject/:difficulty and start from last_puzzle_id.
Star/Favorite Button:
Modify the star button to send API requests to /api/user/favorites (POST/DELETE) to update user's starred subjects on the server.
On the Dashboard, fetch user's starred subjects from the backend and display them at the top.
User Dashboard Component: Display all progress data fetched from the backend.
3.3. Dark/Light Mode Toggle
Theme Context/State: Create a React Context (ThemeContext) to manage the current theme ('light' or 'dark').
Toggle Button Component: A button component that, on click:
Changes the theme state.
Updates the icon (<SunIcon /> or <MoonIcon />).
Saves the preference to localStorage.
TailwindCSS Integration:
Configure tailwind.config.js to enable dark mode based on a class (e.g., darkMode: 'class').
Dynamically add/remove the dark class to the <html> or <body> tag based on the theme state.
Use Tailwind's dark mode variants in your components (e.g., bg-white dark:bg-gray-800).
Initial Load: On app load, check localStorage for the saved theme preference and apply it.
This framework covers the essential steps for integrating these new features into your existing application. Remember to handle error states, loading states, and provide good user feedback for all these new interactions.






